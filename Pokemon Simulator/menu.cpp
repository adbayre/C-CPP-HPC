#include <iostream>
#include <limits>
#include <algorithm>
#include <locale>
#include <iterator>
#include <set>
#include "combat.cpp"
using namespace std;
// - MENU.CPP : FICHIER A COMPILER -
// JOUER AVEC JOUEUR MAJD POUR BATTRE LA LIGUE ET TESTER TOUTES LES FONCTIONNALITES 

// Efface la console (en simulant par des sauts de 100 lignes)
void consoleClear() {
    for (int i = 0; i < 100; ++i) cout << endl;
}

/// @brief Fonction pour afficher le pok√©dex en liste de Pok√©mons
/// @param pokedex 
void afficherPokedex(vector<Pokemon> pokedex){

    // Chargement des couleurs
    const string reset = "\033[0m";
    const string bold = "\033[1m";
    const string cyan = "\033[36m";
    const string yellow = "\033[33m";
    // Affichage de tous les pok√©mon
    for(Pokemon pokemon : pokedex){
        pokemon.afficher();

    }
    // Sortie console
    cout << bold << cyan;
    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë   "<< reset <<"    ‚¨Ü ‚¨Ü ‚¨Ü      üìò  POK√âDEX NATIONAL       ‚¨Ü ‚¨Ü ‚¨Ü "<< cyan << "      ‚ïë" << endl;
    cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << endl;
    cout << "‚ïë "<< yellow <<"Voici la liste compl√®te des Pok√©mon connus √† ce jour !" << cyan <<"  ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << reset << endl << endl;
}

/// @brief Demande une saisie utilisateur avec message personnalis√©
/// @param message 
/// @return La saisie utilisateur
string entree(const string& message) {
    cout << message;
    string input;
    getline(cin >> ws, input);
    return input;
}

/// @brief Fonction pour standardiser les mots (noms de pok√©mon, de type etc)
/// @param str 
/// @return L'entr√©e standardis√©e
string enleverAccents(const string &str) {
    string sortie = str;

    // Utilisation de cha√Ænes pour g√©rer les caract√®res multioctets
    const vector<pair<string, string>> accents = {
        {"√©", "e"}, {"√®", "e"}, {"√™", "e"}, {"√´", "e"},
        {"√†", "a"}, {"√¢", "a"}, {"√§", "a"}, {"√â", "e"},
        {"√Æ", "i"}, {"√Ø", "i"},
        {"√¥", "o"}, {"√∂", "o"},
        {"√π", "u"}, {"√ª", "u"}, {"√º", "u"},
        {"√ß", "c"}
    };

    // On remplace dans le string le caract√®re accentu√©
    for (const auto& [accent, remplacement] : accents) {
        size_t pos = 0;
        while ((pos = sortie.find(accent, pos)) != string::npos) {
            sortie.replace(pos, accent.length(), remplacement);
            pos += remplacement.length();
        }
    }

    transform(sortie.begin(), sortie.end(), sortie.begin(), ::tolower);

    return sortie;
}

/// @brief M√©thode pour rechercher un pok√©mon du pok√©dex
/// @param recherche
/// @param pokedex 
/// @return Le pok√©mon trouv√© par la m√©thode
Pokemon rechercherPokemon(const string &recherche, const vector<Pokemon> &pokedex) {
    string rechercheCorr = enleverAccents(recherche);
    vector<const Pokemon*> correspondances;

    // Cherche tous les Pok√©mon dont le nom sans accent contient le texte recherch√©
    for (const auto &pokemon : pokedex) {
        string nomSansAccent = enleverAccents(pokemon.getNom());

        if (nomSansAccent.find(recherche) != string::npos) {
            correspondances.push_back(&pokemon);
        }
    }

    // Aucune correspondance trouv√©e, on relance la recherche
    if (correspondances.empty()) {
        cout << "‚ùå Aucun Pok√©mon trouv√© correspondant √† '" << recherche << "'. Veuillez r√©essayer." << endl;
        return rechercherPokemon(entree("Nom du pok√©mon : "), pokedex); // Fonction r√©cursive jusqu'√† succ√®s
    }

    // Si une seule correspondance parfaite -> retour direct
    for (const Pokemon* p : correspondances) {
        if (enleverAccents(p->getNom()) == rechercheCorr || correspondances.size()==1) {
            cout << "‚úÖ Correspondance trouv√©e : " << p->getNom() << endl;
            p->afficher();
            return *p;
        }
    }

    // Plusieurs correspondances, on va demander √† l'utilisateur de choisir
    cout << "üîç Plusieurs correspondances trouv√©es : " << endl;
    for (size_t i = 0; i < correspondances.size(); ++i) {
        correspondances[i]->afficher();
    }
    for (size_t i = 0; i < correspondances.size(); ++i) {
        cout << i+1 << ". " << correspondances[i]->getNom() << endl;
    }

    size_t choix = 0;
    // Choisir un index
    while (true) {
        cout << "üëâ Entrez le num√©ro du Pok√©mon que vous voulez choisir : ";
        cin >> choix;
        if (choix >= 1 && choix <= correspondances.size()) {
            break;
        }
        cin.clear(); 
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); 
        cout << "‚ùå Choix invalide. Essayez encore." << endl;
    }
    return *(correspondances[choix - 1]);
}

/// @brief M√©thode qui correspond au centre pok√©mon
/// @param equipe 
void soinEquipe(vector<Pokemon>& equipe)
{
    if (equipe.empty()) {
        cout << "Votre √©quipe est vide. Aucun soin n√©cessaire." << endl;
        return;
    }
    // Textes copi√©s de let's play de pok√©mon rouge
    cout << "Bonjour! Bienvenue au Centre Pok√©mon, o√π nous \nsoignons les Pok√©mons." << endl;
    cout << "Voulez-vous que nous nous occupions de votre √©quipe ? (O/N) : ";
    char reponse;
    cin >> reponse;
    reponse = toupper(reponse);

    if (reponse != 'O') {
        cout << "Tr√®s bien, √† bient√¥t au Centre Pok√©mon !" << endl;
        return;
    }
    // Interface de soin
    cout << "Tr√®s bien ! Confiez-moi votre √©quipe un instant." << endl;
    cin.get();
    for (auto& pkm : equipe) {        
        if (pkm.getHp() < pkm.getMaxHp()) {
            cout << pkm.getNom() << " a retrouv√© toute son √©nergie !" << endl;
            pkm.setHp(pkm.getMaxHp());
        } else {
            cout << pkm.getNom() << " √©tait d√©j√† en pleine forme !" << endl;
        }
    }
    cin.get();
    cout << "Merci d‚Äôavoir attendu. √Ä bient√¥t !" << endl;
}

/// @brief Fonction d'interaction
/// @param equipe 
void interagirEquipe(vector<Pokemon>& equipe) {
    // Chargement des couleurs
    const string reset = "\033[0m";
    const string bold = "\033[1m";
    const string cyan = "\033[36m";
    const string green = "\033[32m";
    const string red = "\033[31m";

    if (equipe.empty()) {
        cout << red << "Votre √©quipe est vide !" << reset << endl;
        return;
    }

    // Affichage console
    cout << bold << cyan << "Voulez-vous interagir avec un de vos Pok√©mon ?" << reset << endl;
    cout << green << "Choisissez un num√©ro de Pok√©mon :" << reset << endl;

    // Affichage des pok√©mon
    for (size_t i = 0; i < equipe.size(); ++i) {
        cout << i + 1 << ". " << equipe[i].getNom() << endl;
    }

    cout << "\nEntrez votre choix (1 √† " << equipe.size() << ", 0 pour annuler) : ";
    int choix;
    cin >> choix;

    if (choix == 0) {
        cout << red << "Interaction annul√©e." << reset << endl;
        return;
    }

    // Sortie d'un cri al√©atoire parmi la liste
    if (choix >= 1 && choix <= equipe.size()) {
        vector<string> cris = {"Pip", "Grrr", "Reeee", "Hop", "Zoup"};
        string cri = cris[rand() % cris.size()];
    
        cout << green << cri << " ! Je suis " << equipe[choix - 1].getNom() << " !" << reset << endl;
    } else {
        cout << red << "Choix invalide." << reset << endl;
    }
}

/// @brief Fonction du menu qui permet de r√©organiser une √©quipe, ou interagir
/// @param joueur 
void gererEquipe(Joueur* joueur) {
    // Chargement des couleurs
    const string reset = "\033[0m";
    const string bold = "\033[1m";
    const string green = "\033[32m";
    const string red = "\033[31m";

    joueur->afficherEquipe();

    if (joueur->getEquipe().empty()) {
        cout << red << "Vous n'avez aucun Pok√©mon dans votre √©quipe." << reset << endl;
        return;
    }

    // On prompt l'utilisateur
    cout << bold << "Que souhaitez-vous faire ?" << reset << endl;
    cout << "1. üîÄ R√©ordonner l‚Äô√©quipe" << endl;
    cout << "2. üß∏ Interagir avec un Pok√©mon" << endl;
    cout << "0. Retour" << endl;
    cout << green << "Votre choix : " << reset;
    int choix;
    cin >> choix;
    consoleClear();

    // Fonction pour r√©ordonner l'√©quipe
    switch (choix) {
        case 1: {
            vector<Pokemon>& equipe = joueur->getEquipe();
            cout << "\nVoici votre √©quipe :" << endl;
            const string reset = "\033[0m";
            const string green = "\033[32m";
            
            // Affichage de l'√©quipe
            for (size_t i = 0; i < equipe.size(); ++i) {
                cout << green << i + 1 << ". " << equipe[i].getNom() << reset << endl;
            }
            cout << "Entrez les indices (1 √† " << equipe.size() << ") de deux Pok√©mon √† √©changer :\n";
            int i, j;
            cin >> i >> j;
            // Si on valide les index, l'√©quipe est r√©organis√©e
            if (i >= 1 && i <= equipe.size() && j >= 1 && j <= equipe.size()) {
                swap(equipe[i - 1], equipe[j - 1]);
                cout << green << "L‚Äô√©quipe a √©t√© r√©organis√©e." << reset << endl;
                // On r√©affiche l'√©quipe sinon c'est pas tr√®s clair
                joueur->afficherEquipe();
            } else {
                cout << red << "Indices invalides." << reset << endl;
            }
            break;
        }
        case 2:
            // On lance la fonction d'interaction
            interagirEquipe(joueur->getEquipe());
            break;
        case 0:
            break;
        default:
            cout << red << "Choix invalide." << reset << endl;
    }
}

/// @brief Affichage des champions de gym √† combattre ou interagir
/// @param joueur 
/// @param champions 
void afficheChampionsDisponibles(Joueur* joueur, vector<Champion*>& champions) {
    // Chargement des couleurs
    const string reset = "\033[0m";
    const string bold = "\033[1m";
    const string cyan = "\033[36m";
    const string yellow = "\033[33m";
    const string red = "\033[31m";
    const string green = "\033[32m";

    while (true) {
        consoleClear();
        vector<string> badgesObtenus = joueur->getBadgesListe();

        // Affichage 
        cout << bold << cyan << "\n=== Liste des Champions de Gym ===" << reset << endl;
        for (size_t i = 0; i < champions.size(); ++i) {
            const string& nom = champions[i]->getNom();
            const string& arene = champions[i]->getArene();
            const string& badge = champions[i]->getBadge();
            // On prend note des champions d√©j√† vaincus
            bool dejaVaincu = find(badgesObtenus.begin(), badgesObtenus.end(), badge) != badgesObtenus.end();

            cout << yellow << (i + 1) << ". " << nom << " (" << arene << ")" << (dejaVaincu ? green + string(" [D√©j√† vaincu]") : "") << reset << endl;
        }

        cout << yellow << "0. " << reset << "Retour au menu principal" << endl;
        cout << "\nFaites votre choix (0 pour retour) : ";
        int choix;
        cin >> choix;
        if (choix == 0) return;
        if (cin.fail() || choix < 1 || choix > (int)champions.size()) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << red << "Choix invalide. R√©essayez." << reset << endl;
            cin.get();
            continue;
        }
        // On enregistre un pointeur vers le champion choisi
        Champion* championChoisi = champions[choix - 1];
        string badge = championChoisi->getBadge();
        bool dejaVaincu = find(badgesObtenus.begin(), badgesObtenus.end(), badge) != badgesObtenus.end();

        // Si on prompt le champion d√©j√† vaincu, on a une interaction personnalis√©e
        if (dejaVaincu) {
            consoleClear();
            cout << bold << cyan << championChoisi->getNom() << " : " << reset
                 << "Bravo dresseur ! Tu as d√©j√† remport√© le badge " << badge << "." << endl;
            cout << "Tu peux venir discuter avec moi quand tu veux !" << endl;
            cin.ignore();
            cin.get();
        // Sinon, on lance un combat
        } else {
            Combat combat(*joueur, *championChoisi);
            consoleClear();
            combat.partie();
            // Si √† l'issue du combat le joueur a perdu, on l'envoie au centre pok√©mon
            bool tousKo = true;
            for (const Pokemon& p : joueur->getEquipe()) {
                if (!p.estKo()) {
                    tousKo = false;
                    break;
                }
            }

            if (tousKo) {
                cout << red << "\nTous vos Pok√©mon sont K.O. ! Direction le Centre Pok√©mon..." << reset << endl;
                soinEquipe(joueur->getEquipe());
                cin.get();
            }
        }
    }
}

/// @brief M√™me fonction que pour les champions pour les ma√Ætres de ligue
/// @param joueur 
/// @param maitres 
void afficheMaitresDisponibles(Joueur* joueur, vector<Maitre*>& maitres) {
    // Chargement des couleurs
    const string reset = "\033[0m";
    const string bold = "\033[1m";
    const string cyan = "\033[36m";
    const string orange = "\033[38;5;208m";
    const string red = "\033[31m";
    // Affichage console
    cout << bold << cyan << "\nListe des Ma√Ætres Pok√©mon :" << reset << endl;
    for (int i = 0; i < maitres.size(); ++i) {
        cout << orange << i << ". "
             << maitres[i]->getNom() << " (" << maitres[i]->getEquipe()[0].getTypes()[0] << ")" << reset << endl;
    }
    cout << "Appuyez sur Entr√©e pour continuer..." << endl;
    cin.ignore(1, '\n');
    cin.get();
    int choix;
    // Choix al√©atoire du ma√Ætre de ligue
    srand(static_cast<unsigned int>(time(0)));
    choix = rand() % maitres.size();
    if (choix >= 0 && choix < maitres.size()) {
        Combat c(*joueur, *maitres[choix]);
        consoleClear();
        c.partie();

        // Soigner si tous les Pok√©mon sont K.O.
        bool tousKo = true;
        for (const Pokemon& p : joueur->getEquipe()) {
            if (!p.estKo()) {
                tousKo = false;
                break;
            }
        }

        if (tousKo) {
            cout << red << "\nTous vos Pok√©mon sont K.O. ! Direction le Centre Pok√©mon..." << reset << endl;
            soinEquipe(joueur->getEquipe());
        } else {
            delete maitres[choix]; 
            maitres.erase(maitres.begin() + choix);
        }
    } else {
        cout << red << "Choix invalide." << reset << endl;
    }
}

/// @brief Affichage des cr√©dits si l'on a vaincu la ligue
/// @param joueur 
void credits(Joueur* joueur){
    // Chargement des couleurs
    const string reset = "\033[0m";
    const string bold = "\033[1m";
    const string yellow = "\033[33m";
    const string cyan = "\033[36m";
    // Panth√©on des pok√©mon
    for(int i = 0; i<joueur->getEquipe().size(); i++){
        joueur->getEquipe()[i].afficher();        
        cout << bold << cyan << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << reset << endl;
        cout << bold << cyan << "‚ïë" << yellow << bold << "                  CHAMPION                  " << bold << cyan << "‚ïë" << endl;
        cout << bold << cyan << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << reset << endl;
        cin.get();
        
    }
    // Affichage des statistiques du joueur en fin de jeu
    joueur->AfficherStatistiques();
    cout << bold << "\n~ Jeu cr√©√© par Adrien Bayre et Tom Bernhard ~" << reset << endl;
    cin.get();
    exit(0);
}

/// @brief Fonction du pr√©menu pour s√©lectionner parmi les joueurs du CSV
/// @param joueurs 
/// @return Le joueur choisi
Joueur* choisirDresseurExistant(vector<Joueur*> joueurs) {
    if (joueurs.empty()) {
        cout << "Aucun dresseur n'est disponible pour le moment." << endl;
        return nullptr;
    }

    cout << "Liste des dresseurs disponibles :" << endl;
    for (size_t i = 0; i < joueurs.size(); ++i) {
        cout << i + 1 << ". " << joueurs[i]->getNom() << endl;
    }

    int choix = 0;
    while (true) {
        cout << "Entrez le num√©ro du dresseur √† s√©lectionner : ";
        cin >> choix;

        if (cin.fail() || choix < 1 || choix > (int)joueurs.size()) {
            cout << "Entr√©e invalide. Veuillez r√©essayer." << endl;
            cin.clear(); // Clear error flags
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Ignore the rest of the line
        } else {
            break;
        }
    }

    return joueurs[choix - 1];
}

/// @brief Fonction du pr√©menu pour cr√©er un joueur √† la main (ou avec √©quipe al√©atoire)
/// @param pokedex 
/// @param tailleEquipe 
/// @return Le joueur avec son √©quipe
Joueur* creerEquipeManuelle(const vector<Pokemon> &pokedex, int tailleEquipe = 6) {

    // Chargement des couleurs
    const string reset = "\033[0m";
    const string bold = "\033[1m";
    const string cyan = "\033[36m";
    const string yellow = "\033[33m";

    // Demander le nom du joueur
    string nomJoueur;
    cout << bold << cyan << "=== Cr√©ation manuelle d'√©quipe Pok√©mon ===" << reset << endl;
    cout << yellow << "Entrez le nom de votre dresseur : " << reset;
    getline(cin >> ws, nomJoueur);

    // Initialisation de la future √©quipe
    vector<Pokemon> equipe;

    char mode;
    cout << "Choisir entre al√©atoire (A) ou manuel (autre)";
    cin >> mode;
    mode = toupper(mode);
    // Choix al√©atoire
    if (mode == 'A')
{
    srand(time(0));
    set<string> typesEquipe;
    set<string> nomsUtilis√©s;
    while ((int)equipe.size() < tailleEquipe) {
        int index = rand() % pokedex.size();
        Pokemon p = pokedex[index];

        // V√©rifie que ce Pok√©mon n'est pas d√©j√† dans l‚Äô√©quipe
        if (nomsUtilis√©s.count(p.getNom()) > 0) continue;

        // V√©rifie si c‚Äôest le dernier Pok√©mon √† ajouter et si √ßa respecte les 3 types minimum
        set<string> typesAvecNouveau = typesEquipe;
        for (const string& type : p.getTypes()) {
            typesAvecNouveau.insert(type);
        }

        if (equipe.size() == tailleEquipe - 1 && typesAvecNouveau.size() < 3) {
            continue;
        }

        // Ajout accept√©
        equipe.push_back(p);
        nomsUtilis√©s.insert(p.getNom());
        for (const string& type : p.getTypes()) {
            typesEquipe.insert(type);
        }

        p.afficher();
        cout << bold << cyan << p.getNom() << reset << " a √©t√© ajout√© √† l‚Äô√©quipe !" << endl;
        cout << "Pok√©mon dans l'√©quipe : " << equipe.size() << "/" << tailleEquipe << endl;
        if (equipe.size() == 1)
            cin.ignore(1, '\n');
        cin.get();
    }
}
    else {
        while ((int)equipe.size() < tailleEquipe) {
            cout << "\n" << yellow << "Tapez un nom de Pok√©mon, ou 'afficher' pour voir tout le Pok√©dex : " << reset;
            string input;
            getline(cin >> ws, input);
            consoleClear();
            if (input == "afficher") {
                for (const Pokemon &pokemon : pokedex) {
                    pokemon.afficher();
                }
                continue;
            }

            Pokemon p = rechercherPokemon(input, pokedex);
            
            // V√©rifie qu'il n'est pas d√©j√† dans l'√©quipe
            bool dejaDansEquipe = false;
            for (const Pokemon& pk : equipe) {
                if (pk.getNom() == p.getNom()) {
                    cout << "‚ö†Ô∏è Ce Pok√©mon est d√©j√† dans l'√©quipe." << endl;
                    dejaDansEquipe = true;
                    break;
                }
            }

            if (dejaDansEquipe) continue;

            // Cr√©er un set avec tous les types actuels de l‚Äô√©quipe
            set<string> typesExistants;
            for (const Pokemon& pk : equipe) {
                for (const string& type : pk.getTypes()) {
                    typesExistants.insert(type);
                }
            }

            // Ajouter temporairement les types du nouveau Pok√©mon
            set<string> typesAvecNouveau = typesExistants;
            for (const string& type : p.getTypes()) {
                typesAvecNouveau.insert(type);
            }

            // V√©rifie s‚Äôil y aurait au moins 3 types diff√©rents avec ce nouveau Pok√©mon
            if (equipe.size() == tailleEquipe - 1 && typesAvecNouveau.size() < 3) {
                cout << "‚ö†Ô∏è L‚Äôajout de ce Pok√©mon ne permet pas d‚Äôavoir au moins 3 types diff√©rents dans l‚Äô√©quipe." << endl;
                continue;
            }

            // Ajout final
            equipe.push_back(p);
            cout << bold << cyan << p.getNom() << reset << " a √©t√© ajout√© √† l‚Äô√©quipe !" << endl;
            cout << "Pok√©mon dans l'√©quipe : " << equipe.size() << "/" << tailleEquipe << endl;
        }
    }    

    cout << bold << cyan << "\n‚úÖ √âquipe compl√®te !" << reset << endl;
    cin.get();
    // Cr√©e un objet Joueur et retourne un pointeur
    Joueur* joueurPerso = new Joueur(nomJoueur, equipe);
    return joueurPerso;
}

/// @brief Pr√©-menu de cr√©ation de joueur
/// @param joueurs 
/// @param pokedex 
/// @return Le joueur cr√©√© au terme du pr√©menu
Joueur* menuOuverture(vector<Joueur*> joueurs, vector<Pokemon>& pokedex) {
    // Chargement des couleurs
    const string reset = "\033[0m";
    const string bold = "\033[1m";
    const string blue = "\033[34m";
    const string green = "\033[32m";
    const string yellow = "\033[33m";
    const string red = "\033[31m";

    int choix;
    Joueur* joueur = nullptr;

    do {
        // Affichage
        consoleClear();
        cout << bold << blue;
        cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
        cout << "‚ïë                üéÆ  LANCEMENT                 ‚ïë" << endl;
        cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << endl;
        cout << "‚ïë 1. üë§‚Äã Utiliser un dresseur existant          ‚ïë" << endl;
        cout << "‚ïë 2. ‚ûï Cr√©er un nouveau joueur                ‚ïë" << endl;            
        cout << "‚ïë 3. ‚ùå Quitter le jeu                         ‚ïë" << endl;
        cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << reset << endl;

        cout << bold << green << "Votre choix : " << reset;
        cin >> choix;
        // Si le choix est mauvais
        if (cin.fail() || choix < 1 || choix > 3) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << red << "Option invalide. Veuillez entrer un num√©ro entre 1 et 3." << reset << endl;
            cout << "\nAppuyez sur Entr√©e pour continuer..." << endl;
            cin.ignore();
            cin.get();
            continue;
        }
        // nettoyer apr√®s le int
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); 

        switch (choix) {
            case 1:
                // Le joueur prend un dresseur existant
                joueur = choisirDresseurExistant(joueurs);
                if (joueur != nullptr){
                    cout << bold << yellow << "Lancement du jeu avec le dresseur " << joueur->getNom() << "..." << reset << endl;
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cin.get();
                    return joueur;
                }

                break;

            case 2:
                // Le joueur veut cr√©er son personnage
                joueur = creerEquipeManuelle(pokedex);
                cout << bold << yellow << "Lancement du jeu avec le dresseur " << joueur->getNom() << "..." << reset << endl;
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');  
                    cin.get();
                return joueur;

            case 3:
                cout << green << "√Ä bient√¥t, dresseur !" << reset << endl;
                break;
        }

        cout << "\nAppuyez sur Entr√©e pour continuer..." << endl;
        cin.get();

    } while (choix != 3);

    return nullptr;
}

/// @brief Fonction menu principal
/// @param joueur 
/// @param pokedex 
/// @param champions 
/// @param maitres 
/// @param nbBadges 
void menu(Joueur* joueur, vector<Pokemon>& pokedex, vector<Champion*>& champions, vector<Maitre*> maitres, int nbBadges) {
    // Chargement des couleurs
    const string reset = "\033[0m";
    const string bold = "\033[1m";
    const string blue = "\033[34m";
    const string green = "\033[32m";
    const string yellow = "\033[33m";
    const string red = "\033[31m";

    int choix;

    do {
        // Affichage 
        consoleClear();
        cout << bold << blue;
        cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
        cout << "‚ïë              üéÆ  MENU PRINCIPAL              ‚ïë" << endl;
        cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << endl;
        cout << "‚ïë 1. üìò Afficher le Pok√©dex                    ‚ïë" << endl;
        cout << "‚ïë 2. üë• Afficher mon √©quipe                    ‚ïë" << endl;
        cout << "‚ïë 3. ‚öîÔ∏è  Lancer un combat contre un champion    ‚ïë" << endl;
        cout << "‚ïë 4. üìä Afficher les statistiques du joueur    ‚ïë" << endl;

        // Afficher l‚Äôoption maitre uniquement si tous les badges sont obtenus
        if (joueur->getBadgesListe().size() == nbBadges) {
            cout << "‚ïë 5. üëë Affronter un Ma√Ætre Pok√©mon            ‚ïë" << endl;
            cout << "‚ïë 6. üè• Aller au Centre Pok√©mon (soin)         ‚ïë" << endl;
            cout << "‚ïë 7. ‚ùå Quitter le jeu                         ‚ïë" << endl;
        } else {
            cout << "‚ïë 5. üè• Aller au Centre Pok√©mon (soin)         ‚ïë" << endl;
            cout << "‚ïë 6. ‚ùå Quitter le jeu                         ‚ïë" << endl;
        }

        cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << reset << endl;
        cout << bold << green << "Votre choix : " << reset;
        // On continue tant que le joueur ne quitte pas 
        while (!(cin >> choix) || choix < 1 || choix > (joueur->getBadgesListe().size() == nbBadges ? 7 : 6)) {
            cin.clear();  
            cin.ignore(numeric_limits<streamsize>::max(), '\n');  
            cout << red << "Option invalide. Veuillez entrer un num√©ro entre 1 et " << (joueur->getBadgesListe().size() == nbBadges ? 7 : 6) << "." << reset << endl;
            cout << bold << green << "Votre choix : " << reset;
        }

        // Gestion des choix selon l‚Äô√©tat des badges
        if (joueur->getBadgesListe().size() == nbBadges) {
            switch (choix) {
                case 1:
                    afficherPokedex(pokedex);
                    break;
                case 2:
                    gererEquipe(joueur);
                    break;
                case 3:
                    afficheChampionsDisponibles(joueur, champions);
                    break;
                case 4:
                    joueur->AfficherStatistiques();
                    break;                
                case 5:                 
                    afficheMaitresDisponibles(joueur, maitres);
                    if(maitres.size()==0){
                        credits(joueur);
                    }
                    break;                
                case 6:
                    soinEquipe(joueur->getEquipe());
                    break;
                case 7:
                    cout << green << "√Ä bient√¥t, dresseur !" << reset << endl;
                    break;
                default:
                    cout << red << "Option invalide. Veuillez r√©essayer." << reset << endl;
            }
        } else {
            switch (choix) {
                case 1:
                    afficherPokedex(pokedex);
                    break;
                case 2:
                    gererEquipe(joueur);
                    break;
                case 3: 
                    afficheChampionsDisponibles(joueur, champions);
                    break;                  
                case 4:
                    joueur->AfficherStatistiques();
                    break;                
                case 5:
                    soinEquipe(joueur->getEquipe());
                    break;
                case 6:
                    cout << green << "√Ä bient√¥t, dresseur !" << reset << endl;
                    break;
                default:
                    cout << red << "Option invalide. Veuillez r√©essayer." << reset << endl;
            }
        }

        cout << "\nAppuyez sur Entr√©e pour continuer..." << endl;
        cin.ignore(1, '\n');
        cin.get();
        consoleClear();

    } while ((joueur->getBadgesListe().size() == nbBadges && choix != 7) ||
             (joueur->getBadgesListe().size() != nbBadges && choix != 6));
}

/// @brief Main fonction
/// @return 0 si le code compile
int main(){
// - INITIALISATION -
    vector<string> badges;
    vector<Pokemon> pokemons = lirePokemonCSV("pokemon.csv");
    vector<Joueur*> joueurs = lireJoueurs("joueur.csv", pokemons);
    consoleClear();
// - MENU D'OUVERTURE -
    // Choisir Majd pour tout tester car son √©quipe est quasi une des seules qui bat toute la ligue
    Joueur* joueur = menuOuverture(joueurs, pokemons);
// - INITIALISATION DU JEU -
    vector<Maitre*> maitres = lireMaitres("maitres.csv", pokemons);
    vector<Champion*> champions = lireChampionsEtBadges("leaders.csv", pokemons, badges);    
    int nbBadges = champions.size();
    cout << "Jeu charg√© avec succ√®s !" << endl;
// - LANCEMENT DE LA PARTIE -
    menu(joueur, pokemons, champions, maitres, nbBadges);
    return 0;
}